package com.pegue.pague.api.controller;

import java.net.URI;
import java.util.List;
import java.util.stream.Collectors;

import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.pegue.pague.api.Repository.ClienteCustomRepository;
import com.pegue.pague.api.controller.dto.ClienteDto;
import com.pegue.pague.api.controller.dto.ClienteDtoResult;
import com.pegue.pague.api.controller.dto.TelefoneDto;
import com.pegue.pague.api.entity.Categoria;
import com.pegue.pague.api.entity.Cliente;
import com.pegue.pague.api.entity.Pessoa;
import com.pegue.pague.api.service.serviceImpl.ClienteServiceImpl;
@RestController
@RequestMapping("/clientes")
@CrossOrigin(origins = "*")
public class ClienteController {
	
	@Autowired
	private ClienteServiceImpl repo;
	
	
	@Autowired
	private ClienteCustomRepository repoCustomCli;
	


	@PostMapping("/new")
	public ResponseEntity<ClienteDto> novo(@Valid @RequestBody ClienteDto clienteDto, TelefoneDto telDto, 
			HttpServletResponse response ) {
		Cliente clienteSalvo = repo.save(clienteDto);
		URI uri = ServletUriComponentsBuilder.fromCurrentRequestUri().path("/{id}")
				 .buildAndExpand(clienteSalvo.getId_cliente()).toUri();
		 response.setHeader("Location", uri.toASCIIString());
		return ResponseEntity.created(uri).body(clienteDto);
		
	}
	
	
	@GetMapping
	private List<ClienteDtoResult> buscaTodos(){
	   return cliRepo.findByCliente()
			   .stream()
			   .map(cliente -> toClienteDtoResult(cliente) )
			   .collect(Collectors.toList());
	}
	private ClienteDtoResult toClienteDtoResult(Cliente cliente) {
		ClienteDtoResult dto = new ClienteDtoResult();
		dto.setId(cliente.getId_cliente());
		dto.setNome(cliente.getPessoa().getNome());
		dto.setEmail(cliente.getPessoa().getEmail());
		dto.setCpfCnpj(cliente.getPessoa().getCpfCnpj());
		dto.setId(cliente.getId_cliente());
		return dto;
		
	}
	
	@PutMapping("edit/{codigo}")
	public ResponseEntity<Pessoa> edit(@PathVariable Long codigo,  @Valid @RequestBody 
			Pessoa pessoacli, TelefoneDto telDto, 
			HttpServletResponse response ) {
		Pessoa pessoaSalva = repo.edit(pessoacli, codigo);
		URI uri = ServletUriComponentsBuilder.fromCurrentRequestUri().path("/{id}")
				 .buildAndExpand(pessoaSalva.getId_pessoa()).toUri();
		 response.setHeader("Location", uri.toASCIIString());
		return ResponseEntity.created(uri).body(pessoaSalva);
		
	}

	@GetMapping("/{codigo}")
	public ResponseEntity<Cliente> findById(@PathVariable Long codigo) {
		return repo.findById(codigo)
				.map(categoria -> ResponseEntity.ok(categoria))
				.orElse(ResponseEntity.notFound().build());
	}

	
}
